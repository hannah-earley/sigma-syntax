name: 'Sigma'
scopeName: 'source.sigma'
comment: '''based off of the language-racket atom grammar'''
fileTypes: [
  'sig'
]
# firstLineMatch: '^#!\\s*/.*\\bsigma(-repl)?'
patterns: [
  {
    include: '#comments'
  }
  {
    include: '#sexp'
  }
]
repository:
  comments:
    patterns: [
      {
        include: '#commentBlock'
      }
      {
        include: '#commentSingle'
      }
    ]
  commentSingle:
    begin: '(^\\s+)?(?=;)'
    beginCaptures:
      '1':
        name: 'punctuation.whitespace.comment.leading.sigma'
    end: '(?!\\G)'
    patterns: [
      {
        begin: ';'
        beginCaptures:
          '0':
            name: 'punctuation.definition.comment.sigma'
        end: '$\\n?'
        name: 'comment.line.semicolon.sigma'
      }
    ]
  commentBlock:
    begin: '\\(\\*'
    beginCaptures:
      '0':
        name: 'punctuation.definition.comment.begin.sigma'
    end: '\\*\\)'
    endCaptures:
      '0':
        name: 'punctuation.definition.comment.end.sigma'
    patterns: [
      {
        include: '#commentBlock'
      }
    ]
    name: 'comment.block.sigma'
  sexp:
    begin: '(\\()'
    beginCaptures:
      '1':
        name: 'punctuation.section.expression.begin.sigma'
    end: '(\\))(\\n)?'
    endCaptures:
      '1':
        name: 'punctuation.section.expression.end.sigma'
      '2':
        name: 'meta.after-expression.sigma'
    name: 'meta.expression.sigma'
    patterns: [
      {
        include: '#comments'
      }
      {
        begin: '(?<=\\()\\s*(inh)\\s*(?=")'
        beginCaptures:
          '1':
            name: 'keyword.control.import.sigma'
        end: '(?=\\))'
        name: 'meta.declaration.import.sigma'
        patterns: [
          {
            begin: '\\G(\")'
            beginCaptures:
              '1':
                name: 'punctuation.definition.string.begin.sigma'
            end: '(\")'
            endCaptures:
              '1':
                name: 'punctuation.definition.string.end.sigma'
            name: 'string.quoted.double.sigma'
            patterns: [
              {
                include: '#stringChar'
              }
            ]
          }
          {
            include: '#identas'
          }
          {
            include: '#ident'
          }
          {
            include: '#illegalRest'
          }
        ]
      }
      {
        begin: '(?<=\\()\\s*(inh\\*)\\s*(?=")'
        beginCaptures:
          '1':
            name: 'keyword.control.import.sigma'
        end: '(?=\\))'
        name: 'meta.declaration.import.sigma'
        patterns: [
          {
            begin: '\\G(\")'
            beginCaptures:
              '1':
                name: 'punctuation.definition.string.begin.sigma'
            end: '(\")'
            endCaptures:
              '1':
                name: 'punctuation.definition.string.end.sigma'
            name: 'string.quoted.double.sigma'
            patterns: [
              {
                include: '#stringChar'
              }
            ]
          }
          {
            match: '(?x)(?<=\")\\s*
                    ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                     [^\\s.#@<>()\\[\\]{}`:\"]*)'
            name: 'entity.name.function.sigma'
          }
          {
            include: '#illegalRest'
          }
        ]
      }
      {
        begin: '(?<=\\()\\s*(beq)(?!\\*)\\s*'
        beginCaptures:
          '1':
            name: 'keyword.control.export.sigma'
        name: 'meta.declaration.export.sigma'
        end: '(?=\\))'
        patterns: [
          {
            include: '#identas'
          }
          {
            include: '#ident'
          }
          {
            include: '#illegalRest'
          }
        ]
      }
      {
        begin: '(?<=\\()\\s*(beq\\*)\\s*'
        beginCaptures:
          '1':
            name: 'keyword.control.export.sigma'
        name: 'meta.declaration.export.sigma'
        end: '(?=\\))'
        patterns: [
          {
            include: '#illegalRest'
          }
        ]
      }
      {
        begin: '(?<=\\()\\s*(grp)\\s*'
        beginCaptures:
          '1':
            name: 'keyword.control.block.sigma'
        end: '(?=\\))'
        name: 'meta.block.sigma'
        patterns: [
          {
            include: '#sexp'
          }
          {
            include: '#illegalRest'
          }
        ]
      }
      {
        begin: '''(?x)(?<=\\()\\s*(def)\\s+
                  ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                   [^\\s.#@<>()\\[\\]{}`:\"]*)'''
        beginCaptures:
          '1':
            name: 'keyword.control.definition.sigma'
          '2':
            name: 'entity.name.function.scheme'
        end: '(?=\\))'
        name: 'meta.declaration.definition.sigma'
        patterns: [
          {
            include: '#sigmaOne'
          }
        ]
      }
      {
        begin: '''(?x)(?<=\\()\\s*(def\\*)\\s+
                  ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                   [^\\s.#@<>()\\[\\]{}`:\"]*)
                  (\\s*(@)\\s*
                   ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                    [^\\s.#@<>()\\[\\]{}`:\"]*))?'''
        beginCaptures:
          '1':
            name: 'keyword.control.definition.sigma'
          '2':
            name: 'entity.name.function.scheme'
          '4':
            name: 'keyword.operator.function.alias.sigma'
          '5':
            name: 'support.function.sigma'
        end: '\\)\\s*(?=\\))'
        name: 'meta.declaration.definition.sigma'
        patterns: [
          {
            include: '#illegalReserved'
          }
          {
            include: '#sigmaOne'
          }
        ]
      }
      {
        begin: '(?<=\\()\\s*(perm)\\s*\\('
        beginCaptures:
          '1':
            name: 'keyword.control.definition.sigma'
        end: '\\)\s*(?=\\))'
        name: 'meta.declaration.definition.sigma'
        patterns: [
          {
            begin: '(?<=\\))\\s*\\('
            end: '(?=\\))'
            patterns: [
              {
                include: '#illegalReserved'
              }
              {
                match: '''(?x) #\\b
                          ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                           [^\\s.#@<>()\\[\\]{}`:\"]*)\\s*
                          (?=\\))'''
                captures:
                  '1':
                    name: 'entity.name.function.scheme'
              }
              {
                include: '#sigma'
              }
            ]
          }
          {
            begin: '''(?x)\\G(?<=\\()\\s*
                      ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                       [^\\s.#@<>()\\[\\]{}`:\"]*)'''
            beginCaptures:
              '1':
                name: 'entity.name.function.scheme'
            end: '\\)'
            patterns: [
              {
                include: '#illegalReserved'
              }
              {
                include: '#sigma'
              }
            ]
          }
        ]
      }
      {
        begin: '(?<=\\()\\s*(perm\\*)\\s*\\('
        beginCaptures:
          '1':
            name: 'keyword.control.definition.sigma'
        end: '\\)\s*(?=\\))'
        name: 'meta.declaration.definition.sigma'
        patterns: [
          {
            begin: '(?<=\\))\\s*\\('
            end: '(?=\\))'
            patterns: [
              {
                include: '#illegalReserved'
              }
              {
                match: '''(?x) #\\b
                          ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                           [^\\s.#@<>()\\[\\]{}`:\"]*)\\s*
                          (?=\\))'''
                captures:
                  '1':
                    name: 'entity.name.function.scheme'
              }
              {
                include: '#sigma'
              }
            ]
          }
          {
            begin: '''(?x)\\G(?<=\\()\\s*
                      ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                       [^\\s.#@<>()\\[\\]{}`:\"]*)
                      (\\s*(@)\\s*
                        ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                         [^\\s.#@<>()\\[\\]{}`:\"]*))?'''
            beginCaptures:
              '1':
                name: 'entity.name.function.scheme'
              '3':
                name: 'keyword.operator.function.alias.sigma'
              '4':
                name: 'support.function.sigma'
            end: '\\)'
            patterns: [
              {
                include: '#illegalReserved'
              }
              {
                include: '#sigma'
              }
            ]
          }
        ]
      }
      {
        include: '#illegalRest'
      }
      {
        include: '#illegalReserved'
      }
      {
        match: '(<=\\()\\s*(?=\\))'
        name: 'invalid.illegal.declaration.sigma'
      }
    ]
  illegalRest:
    match: '[^\\s)]+'
    name: 'invalid.illegal.declaration.sigma'
  illegalReserved:
    match: '\\b(inh\\*?|beq\\*?|grp|def\\*?|perm\\*?)\\b'
    name: 'invalid.illegal.name.sigma'
  ident:
    patterns: [
      {
        include: '#illegalReserved'
      }
      {
        match: '''(?x) #\\b
                  ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                   [^\\s.#@<>()\\[\\]{}`:\"]*)'''
        captures:
          '1':
            name: 'variable.parameter.sigma'
      }
    ]
  identas:
    patterns: [
      {
        include: '#illegalReserved'
      }
      {
        match: '''(?x) #\\b
                  ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                   [^\\s.#@<>()\\[\\]{}`:\"]*)
                  \\s*(@)\\s*
                  ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                   [^\\s.#@<>()\\[\\]{}`:\"]*)'''
        captures:
          '1':
            name: 'variable.parameter.sigma'
          '2':
            name: 'keyword.operator.function.alias.sigma'
          '3':
            name: 'support.function.sigma'
      }
    ]
  sigma:
    patterns: [
      {
        include: '#illegalReserved'
      }
      {
        match: '''(?x) #\\b
                  (`[^\\s.#@<>()\\[\\]{}`:\"0-9]
                    [^\\s.#@<>()\\[\\]{}`:\"]*)'''
        captures:
          '1':
            name: 'entity.name.function.sigma'
      }
      {
        comment: 'label, ref should be entity.name.function.sigma'
        match: '''(?x) #\\b
                  (`[^\\s.#@<>()\\[\\]{}`:\"0-9]
                    [^\\s.#@<>()\\[\\]{}`:\"]*)'''
        captures:
          '1':
            name: 'entity.name.tag.sigma'
      }
      {
        begin: '\\('
        end: '\\)'
        patterns: [
          {
            include: '#sigma'
          }
        ]
      }
      {
        begin: '\\['
        end: '\\]'
        patterns: [
          {
            include: '#sigma'
          }
          {
            begin: '\\.'
            end: '(?=\\])'
            patterns: [
              {
                include: '#sigmaOne'
              }
            ]
          }
        ]
      }
      {
        begin: '\\{'
        end: '\\}'
        patterns: [
          {
            include: '#sigma'
          }
        ]
      }
      {
        match: '\\b#\\b'
        name: 'entity.name.tag.sigma'
      }
      {
        include: '#num'
      }
    ]
  sigmaOne:
    patterns: [
      {
        include: '#sigma'
      }
    ]
  stringChar:
    patterns: [
      {
        match: '''(?x)\\\\ (
          \\\\             |
          [abefnprtv'"?]   |
          [0-3]\\d{,2}     |
          [4-7]\\d?        |
          x[a-fA-F0-9]{,2} |
          u[a-fA-F0-9]{,4} |
          U[a-fA-F0-9]{,8} )
        '''
        name: 'constant.character.escape.sigma'
      }
      {
        match: '\\\\.'
        name: 'invalid.illegal.unknown-escape.sigma'
      }
    ]
  num:
    patterns: [
      {
        name: 'constant.numeric.hexadecimal.sigma'
        match: '0[xX][0-9a-fA-F]+'
      }
      {
        name: 'constant.numeric.octal.sigma'
        match: '0[oO][0-7]+'
      }
      {
        name: 'constant.numeric.decimal.sigma'
        match: '[0-9]+'
      }
    ]
