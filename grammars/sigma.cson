name: 'Sigma'
scopeName: 'source.sigma'
comment: '''based off of the language-racket atom grammar'''
fileTypes: [
  'sig'
]
firstLineMatch: '^#!\\s*/.*\\bsigma(-repl)?'
patterns: [
  {
    include: '#comments'
  }
  {
    include: '#sexp'
  }
]
repository:
  comments:
    patterns: [
      {
        include: '#commentBlock'
      }
      {
        include: '#commentSingle'
      }
      {
        match: '^#!\\s*/.*\\bsigma(-repl)?'
        name: 'comment.line.shebang.sigma'
      }
    ]
  commentSingle:
    begin: '(^\\s+)?(?=;)'
    beginCaptures:
      '1':
        name: 'punctuation.whitespace.comment.leading.sigma'
    end: '(?!\\G)'
    patterns: [
      {
        begin: ';'
        beginCaptures:
          '0':
            name: 'punctuation.definition.comment.sigma'
        end: '$\\n?'
        name: 'comment.line.semicolon.sigma'
      }
    ]
  commentBlock:
    begin: '\\(\\*'
    beginCaptures:
      '0':
        name: 'punctuation.definition.comment.begin.sigma'
    end: '\\*\\)'
    endCaptures:
      '0':
        name: 'punctuation.definition.comment.end.sigma'
    patterns: [
      {
        include: '#commentBlock'
      }
    ]
    name: 'comment.block.sigma'
  sexp:
    begin: '(\\()'
    beginCaptures:
      '1':
        name: 'punctuation.section.expression.begin.sigma'
    end: '(\\))(\\n)?'
    endCaptures:
      '1':
        name: 'punctuation.section.expression.end.sigma'
      '2':
        name: 'meta.after-expression.sigma'
    name: 'meta.expression.sigma'
    patterns: [
      {
        include: '#comments'
      }
      { # perm definitions
        begin: '\\s*(perm\\*?)(?=[\\s.#@<>()\\[\\]{}`:\"])'
        beginCaptures:
          '1':
            name: 'keyword.control.definition.sigma'
        end: '(?=\\))'
        patterns: [
          {
            include: '#sexpPermRHS'
          }
          {
            include: '#comments'
          }
          {
            include: '#sexpPermLHS'
          }
          {
            include: '#illegalRest'
          }
        ]
      }
      {
        begin: '\\s*(inh\\*?)(?=[\\s.#@<>()\\[\\]{}`:\"])'
        beginCaptures:
          '1':
            name: 'keyword.control.import.sigma'
        end: '(?=\\))'
        patterns: [
          {
            include: '#comments'
          }
          {
            match: '[^\"\\s)]+'
            name: 'invalid.illegal.declaration.sigma'
          }
          {
            begin: '\"'
            beginCaptures:
              '0':
                name: 'punctuation.definition.string.begin.sigma'
            end: '(?=\\))'
            patterns: [
              {
                begin: '(\"|$\\n?)'
                beginCaptures:
                  '0':
                    name: 'punctuation.definition.string.end.sigma'
                end: '(?=\\))'
                patterns: [
                  {
                    include: '#comments'
                  }
                  {
                    include: '#identas'
                  }
                  {
                    include: '#ident'
                  }
                  {
                    include: '#illegalRest'
                  }
                ]
              }
              {
                include: '#stringChar'
              }
              {
                match: '[^\"\\\\\\n]+'
                name: 'string.quoted.double.filepath.sigma'
              }
            ]
          }
        ]
      }
      { # bequest-some statement
        begin: '\\s*(beq)(?!\\*)(?=[\\s.#@<>()\\[\\]{}`:\"])'
        beginCaptures:
          '1':
            name: 'keyword.control.export.sigma'
        name: 'meta.declaration.export.sigma'
        end: '(?=\\))'
        patterns: [
          {
            include: '#comments'
          }
          {
            include: '#identas'
          }
          {
            include: '#ident'
          }
          {
            include: '#illegalRest'
          }
        ]
      }
      { # bequest-all statement
        begin: '\\s*(beq\\*)(?=[\\s.#@<>()\\[\\]{}`:\"])'
        beginCaptures:
          '1':
            name: 'keyword.control.export.sigma'
        name: 'meta.declaration.export.sigma'
        end: '(?=\\))'
        patterns: [
          {
            include: '#comments'
          }
          {
            include: '#illegalRest'
          }
        ]
      }
      { # group statement
        begin: '\\s*(grp)(?=[\\s.#@<>()\\[\\]{}`:\"])'
        beginCaptures:
          '1':
            name: 'keyword.control.block.sigma'
        end: '(?=\\))'
        name: 'meta.block.sigma'
        patterns: [
          {
            include: '#comments'
          }
          {
            include: '#sexp'
          }
          {
            include: '#illegalRest'
          }
        ]
      }
      { # definition statements
        begin: '\\s*(def\\*?)(?=[\\s.#@<>()\\[\\]{}`:\"])'
        beginCaptures:
          '1':
            name: 'keyword.control.definition.sigma'
        end: '(?=\\))'
        patterns: [
          {
            include: '#comments'
          }
          { # handle illegal name in identifier
            begin: '''(?x)\\s*
                      (inh\\*?|beq\\*?|grp|def\\*?|perm\\*?)
                      (?=[\\s.#@<>()\\[\\]{}`:\"])'''
            beginCaptures:
              '1':
                name: 'invalid.illegal.name.sigma'
            end: '(?=\\))'
            patterns: [
              {
                include: '#illegalRest'
              }
            ]
          }
          { # match identifier + value, highlighting identifier
            begin: '''(?x)\\s*
                      ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                       [^\\s.#@<>()\\[\\]{}`:\"]*)
                      (\\s*(@))?'''
            beginCaptures:
              '1':
                name: 'entity.name.function.scheme'
              '3':
                name: 'keyword.operator.function.alias.sigma'
            end: '(?=\\))'
            patterns: [
              { # handle unexpected as-name
                match: '''(?x)
                          (@\\s*
                           ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                            [^\\s.#@<>()\\[\\]{}`:\"]*))'''
                captures:
                  '1':
                    name: 'invalid.illegal.name.sigma'
              }
              { # handle illegal as-name
                match: '''(?x)(?<=@)\\s*
                          (inh\\*?|beq\\*?|grp|def\\*?|perm\\*?)
                          (?=[\\s.#@<>()\\[\\]{}`:\"])'''
                captures:
                  '1':
                    name: 'invalid.illegal.name.sigma'
              }
              { # highlight as-name
                match: '''(?x)(?<=@)\\s*
                          ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                           [^\\s.#@<>()\\[\\]{}`:\"]*)'''
                captures:
                  '1':
                    name: 'support.function.sigma'
              }
              { # get definition
                include: '#sigma'
              }
            ]
          }
        ]
      }
      {
        include: '#illegalRest'
      }
      {
        include: '#illegalReserved'
      }
      {
        match: '(<=\\()\\s*(?=\\))'
        name: 'invalid.illegal.declaration.sigma'
      }
    ]
  sexpPermLHS:
    patterns: [
      { # handle illegal name in left-perm identifier
        begin: '''(?x)\\(\\s*
                  (inh\\*?|beq\\*?|grp|def\\*?|perm\\*?)
                  (?=[\\s.#@<>()\\[\\]{}`:\"])'''
        beginCaptures:
          '1':
            name: 'invalid.illegal.name.sigma'
        end: '\\)'
        patterns: [
          {
            include: '#illegalRest'
          }
        ]
      }
      { # match left-perm, highlighting identifier
        begin: '''(?x)\\(\\s*
                  ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                   [^\\s.#@<>()\\[\\]{}`:\"]*)
                  (\\s*(@))?'''
        beginCaptures:
          '1':
            name: 'entity.name.function.scheme'
          '3':
            name: 'keyword.operator.function.alias.sigma'
        end: '\\)'
        patterns: [
          { # handle illegal as-name
            match: '''(?x)(?<=@)\\s*
                      (inh\\*?|beq\\*?|grp|def\\*?|perm\\*?)
                      (?=[\\s.#@<>()\\[\\]{}`:\"])'''
            captures:
              '1':
                name: 'invalid.illegal.name.sigma'
          }
          { # highlight as-name
            match: '''(?x)(?<=@)\\s*
                      ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                       [^\\s.#@<>()\\[\\]{}`:\"]*)'''
            captures:
              '1':
                name: 'support.function.sigma'
          }
          {
            include: '#sigmaPerm'
          }
          {
            match: '(?=\\))'
          }
        ]
      }
      { # handle empty bracket
        match: '\\(\\s*\\)'
      }
    ]
  sexpPermRHS:
    begin: '(?<=\\))'
    end: '\\)\\s*'
    patterns: [
      {
        include: '#comments'
      }
      {
        begin: '\\('
        end: '(?=\\))'
        patterns: [
          { # handle illegal name in right-perm identifier
            match: '''(?x)
                      (inh\\*?|beq\\*?|grp|def\\*?|perm\\*?)
                      (?=[\\s.#@<>()\\[\\]{}`:\"])
                      (?=\\))'''
            captures:
              '1':
                name: 'invalid.illegal.name.sigma'
          }
          { # highlight right-perm identifier
            match: '''(?x)
                      ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                       [^\\s.#@<>()\\[\\]{}`:\"]*)\\s*
                      (?=\\))'''
            captures:
              '1':
                name: 'entity.name.function.scheme'
          }
          {
            include: '#sigmaPerm'
          }
        ]
      }
    ]
  illegalRest:
    match: '[^\\s)]+'
    name: 'invalid.illegal.declaration.sigma'
  illegalReserved:
    match: '(?x)\\b
            (inh\\*?|beq\\*?|grp|def\\*?|perm\\*?)
            (?=[\\s.#@<>()\\[\\]{}`:\"])'
    captures:
      '1':
        name: 'invalid.illegal.name.sigma'
  ident:
    patterns: [
      {
        include: '#illegalReserved'
      }
      {
        match: '''(?x) #\\b
                  ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                   [^\\s.#@<>()\\[\\]{}`:\"]*)'''
        captures:
          '1':
            name: 'entity.name.function.sigma'
      }
    ]
  identas:
    patterns: [
      {
        include: '#illegalReserved'
      }
      {
        match: '''(?x) #\\b
                  ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                   [^\\s.#@<>()\\[\\]{}`:\"]*)
                  \\s*(@)\\s*
                  ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                   [^\\s.#@<>()\\[\\]{}`:\"]*)'''
        captures:
          '1':
            name: 'entity.name.function.sigma'
          '2':
            name: 'keyword.operator.function.alias.sigma'
          '3':
            name: 'support.function.sigma'
      }
    ]
  sigmaCommon:
    patterns: [
      { # handle unexpected as-name
        match: '''(?x)
                  (@\\s*
                   ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                    [^\\s.#@<>()\\[\\]{}`:\"]*))'''
        captures:
          '1':
            name: 'invalid.illegal.name.sigma'
      }
      {
        include: '#comments'
      }
      {
        include: '#illegalReserved'
      }
      {
        match: '''(?x)
                  (`[^\\s.#@<>()\\[\\]{}`:\"0-9]
                    [^\\s.#@<>()\\[\\]{}`:\"]*)'''
        captures:
          '1':
            name: 'entity.name.reference.sigma'
      }
      {
        include: '#sigmaPermPerm'
      }
      {
        match: '#'
        name: 'entity.name.tag.sigma'
      }
      {
        include: '#num'
      }
    ]
  sigma:
    patterns: [
      {
        include: '#sigmaCommon'
      }
      {
        match: '''(?x)
                  ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                   [^\\s.#@<>()\\[\\]{}`:\"]*)'''
        captures:
          '1':
            name: 'entity.name.reference.sigma'
      }
      {
        begin: '\\('
        end: '\\)'
        patterns: [
          {
            include: '#sigma'
          }
        ]
      }
      {
        begin: '(\\[)'
        beginCaptures:
          '1':
            name: 'entity.name.tag.sigma'
        end: '(\\])'
        endCaptures:
          '1':
            name: 'entity.name.tag.sigma'
        patterns: [
          {
            include: '#sigmaPerm'
          }
          {
            begin: '(\\.)'
            beginCaptures:
              '1':
                name: 'entity.name.tag.sigma'
            end: '(?=\\])'
            patterns: [
              {
                include: '#sigma'
              }
            ]
          }
        ]
      }
      {
        begin: '(\\{)'
        beginCaptures:
          '1':
            name: 'entity.name.tag.sigma'
        end: '(\\})'
        endCaptures:
          '1':
            name: 'entity.name.tag.sigma'
        patterns: [
          {
            include: '#sigma'
          }
        ]
      }
    ]
  sigmaPermPerm:
    begin: '<'
    end: '>'
    patterns: [
      { # handle illegal name in left-perm identifier
        begin: '''(?x)\\s*
                  (inh\\*?|beq\\*?|grp|def\\*?|perm\\*?)
                  (?=[\\s.#@<>()\\[\\]{}`:\"])'''
        beginCaptures:
          '1':
            name: 'invalid.illegal.name.sigma'
        end: '(?=>)'
        patterns: [
          {
            include: '#sigmaPerm'
          }
        ]
      }
      { # match left-perm, highlighting identifier
        begin: '''(?x)\\s*
                  ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                   [^\\s.#@<>()\\[\\]{}`:\"]*)'''
        beginCaptures:
          '1':
            name: 'entity.name.function.scheme'
        end: '(?=>)'
        patterns: [
          {
            begin: ':'
            end: '(?=>)'
            patterns: [
              { # handle illegal name in right-perm identifier
                match: '''(?x)
                          (inh\\*?|beq\\*?|grp|def\\*?|perm\\*?)
                          (?=[\\s.#@<>()\\[\\]{}`:\"])
                          (?=>)'''
                captures:
                  '1':
                    name: 'invalid.illegal.name.sigma'
              }
              { # highlight right-perm identifier
                match: '''(?x)
                          ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                           [^\\s.#@<>()\\[\\]{}`:\"]*)\\s*
                          (?=>)'''
                captures:
                  '1':
                    name: 'entity.name.function.scheme'
              }
              {
                include: '#sigmaPerm'
              }
            ]
          }
          {
            include: '#sigmaPerm'
          }
        ]
      }
      { # handle empty bracket
        match: '\\(\\s*\\)'
      }
    ]
  sigmaPerm:
    patterns: [
      {
        include: '#sigmaCommon'
      }
      {
        comment: 'label'
        match: '''(?x)
                  ([^\\s.#@<>()\\[\\]{}`:\"0-9]
                   [^\\s.#@<>()\\[\\]{}`:\"]*)'''
        captures:
          '1':
            name: 'entity.name.type.sigma'
      }
      {
        begin: '\\('
        end: '\\)'
        patterns: [
          {
            include: '#sigmaPerm'
          }
        ]
      }
      {
        begin: '(\\[)'
        beginCaptures:
          '1':
            name: 'entity.name.tag.sigma'
        end: '(\\])'
        endCaptures:
          '1':
            name: 'entity.name.tag.sigma'
        patterns: [
          {
            include: '#sigmaPerm'
          }
          {
            begin: '(\\.)'
            beginCaptures:
              '1':
                name: 'entity.name.tag.sigma'
            end: '(?=\\])'
            patterns: [
              {
                include: '#sigmaPerm'
              }
            ]
          }
        ]
      }
      {
        begin: '(\\{)'
        beginCaptures:
          '1':
            name: 'entity.name.tag.sigma'
        end: '(\\})'
        endCaptures:
          '1':
            name: 'entity.name.tag.sigma'
        patterns: [
          {
            include: '#sigmaPerm'
          }
        ]
      }
    ]
  stringChar:
    patterns: [
      {
        match: '''(?x)\\\\ (
          \\\\             |
          [abefnprtv'"?]   |
          [0-3]\\d{,2}     |
          [4-7]\\d?        |
          x[a-fA-F0-9]{,2} |
          u[a-fA-F0-9]{,4} |
          U[a-fA-F0-9]{,8} )
        '''
        name: 'constant.character.escape.sigma'
      }
      {
        match: '\\\\.'
        name: 'invalid.illegal.unknown-escape.sigma'
      }
    ]
  num:
    patterns: [
      {
        name: 'constant.numeric.hexadecimal.sigma'
        match: '0[xX][0-9a-fA-F]+'
      }
      {
        name: 'constant.numeric.octal.sigma'
        match: '0[oO][0-7]+'
      }
      {
        name: 'constant.numeric.decimal.sigma'
        match: '[0-9]+'
      }
    ]
